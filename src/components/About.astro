---
import { Image } from 'astro:assets'
---

<section
  id='about_me'
  class='about-gradient flex flex-col px-8 xl:px-side-vent md:flex-row pt-24 pb-14 border-b border-white'
>
  <div
    class='flex flex-shrink-0 items-center justify-center w-[238px] self-center'
  >
    <div class='me' itemscope itemtype='https://schema.org/Person'>
      <Image
        src='/profile_real.png'
        class='me__picture'
        alt='my photo'
        width='151'
        height='151'
        itemprop='image'
      />
    </div>
  </div>
  <div
    class='flex flex-col md:gap-5 gap-10 -ml-[2px] md:border-l-2 border-l-0 text-blue-700 border-l-gray-300 md:pl-5 font-roboto-serif'
  >
    <h1 class='font-semibold text-[1.625rem] mt-10 md:mt-0'>
      <span class=''>Olá,</span>
      <span
        class='whitespace-nowrap'
        itemscope
        itemtype='https://schema.org/Person'
      >
        {' '}
         sou <span itemprop='name'>Rogério Ferreira</span>,
      </span>
    </h1>
    <article
      class='flex flex-col lg:flex-row lg:justify-items-stretch lg:items-baseline lg:gap-5 gap-10 text-xl lg:leading-[1.6875rem] leading-7'
      itemprop='mainContentOfPage'
    >
      <p class='lg:w-1/3 text-gray-900' itemprop='about'>
        <span class='break-words'>
          desenvolvedor há mais de dez anos em diversos tipos de aplicação e,
          atualmente, atuo como desenvolvedor Front-end com mais de cinco anos
          de experiência em projetos variados.
        </span>
      </p>
      <p class='lg:w-1/3 text-gray-900'>
        Tenho experiência com trabalho em equipes diversas, com práticas em
        desenvolvimento ágil. Produzo código seguindo as boas práticas atuais de
        Clean Code e aplicando design patterns onde cabem, sem reinventar a
        roda, mas mantendo sempre um olhar sobre o desempenho quando a aplicação
        pede.
      </p>
      <p class='lg:w-1/3 text-gray-900'>
        Já desenvolvi pra ambientes nativos e com poucos recursos, então, sei
        otimizar código pra eficiência, velocidade e baixo consumo desses
        recursos. E em aplicações Web, consigo combinar estas melhorias com boas
        práticas de códigos reaproveitáveis e readaptáveis.
      </p>
    </article>
  </div>
</section>

<style>
  #about_me {
    box-shadow: 0 22px 20px -15px rgb(0 0 0 / 30%);
  }

  .me {
    display: grid;
    margin: 0;
    min-width: 151px;
    min-height: 100%;
    place-content: center;
    background: transparent;
  }

  .me__picture {
    --size: 151px;
    --border_thick: 5px;
    --border_color: theme('colors.orange.500');
    --scale: 1;

    cursor: pointer;
    object-fit: cover;
    width: var(--size);
    padding-top: calc(var(--size) / 5);
    border-radius: 0 0 999px 999px;
    --_g: 50% / calc(100% / var(--scale)) 100% no-repeat content-box;
    --_o: calc((1 / var(--scale) - 1) * var(--size) / 2 - var(--border_thick));
    outline: var(--border_thick) solid var(--border_color);
    outline-offset: var(--_o);
    background: radial-gradient(
        circle closest-side,
        transparent calc(99% - var(--border_thick)),
        var(--border_color) calc(100% - var(--border_thick)) 99%,
        #0000
      )
      var(--_g);
    mask:
      linear-gradient(#000 0 0) no-repeat 50% calc(1px - var(--_o)) /
        calc(100% / var(--scale) - 2 * var(--border_thick) - 2px) 50%,
      radial-gradient(circle closest-side, #000 99%, #0000) var(--_g);
    transform: scale(var(--scale));
    transition: 0.33s cubic-bezier(0.48, 0.01, 1, 1.03);
  }

  .me__picture:hover {
    --scale: 1.5;
  }

  .about-gradient {
    background-image: linear-gradient(
      to bottom,
      theme('colors.gray.200'),
      theme('colors.gray.100'),
      theme('colors.blue.100'),
      theme('colors.blue.50')
    );
  }
</style>
